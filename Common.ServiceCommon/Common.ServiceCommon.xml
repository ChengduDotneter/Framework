<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.ServiceCommon</name>
    </assembly>
    <members>
        <member name="T:Common.ServiceCommon.SkipValidationAttribute">
            <summary>
            跳过验证器的特性
            </summary>
        </member>
        <member name="T:Common.ServiceCommon.ApiValidationFilter">
            <summary>
            Api验证管道
            </summary>
        </member>
        <member name="P:Common.ServiceCommon.ApiValidationFilter.AllowMultiple">
            <summary>
            允许复合验证
            </summary>
        </member>
        <member name="M:Common.ServiceCommon.ApiValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            验证完成后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Common.ServiceCommon.ApiValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            验证时执行
            </summary>
            <param name="actionExecutingContext"></param>
        </member>
        <member name="T:Common.ServiceCommon.BatchGenericSearchController`2">
            <summary>
            ServiceToService 批量查询接口基类
            </summary>
            <typeparam name="TRequest">请求实体泛型</typeparam>
            <typeparam name="TResponse">返回实体泛型</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.JObjectGenericPostController`1">
            <summary>
            Service中无相应的实体接受请求参数时使用且请求参数为JObject的接口基类
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Common.ServiceCommon.JArrayGenericPostController`1">
            <summary>
            Service中无相应的实体接受请求参数时使用且请求参数为JArray的接口基类
            </summary>
            <typeparam name="TResponse">返回实体泛型</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.BatchGenericGetController`1">
            <summary>
            根据ID查询自定义结果的接口基类
            </summary>
            <typeparam name="TResponse">返回实体泛型</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericGetController`1">
            <summary>
            根据ID获取继承于ViewModelBase的实体的接口基类
            </summary>
            <typeparam name="TResponse">返回实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericSearchController`2">
            <summary>
            根据筛选条件查询列表且请求，返回实体皆继承于ViewModelBase的列表查询接口基类
            </summary>
            <typeparam name="TRequest">请求实体泛型，继承于ViewModelBase</typeparam>
            <typeparam name="TResponse">结果实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchController`2.SearchDatas(Common.Model.PageQuery{`0})">
            <summary>
            查询方法
            </summary>
            <param name="pageQuery">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchController`2.PreperDatas(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查询结果处理方法
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchController`2.GetBaseLinq(`0)">
            <summary>
            获取LinqSearchAttribute特性指定的Linq
            </summary>
            <param name="queryCondition">查询条件实体</param>
            <returns></returns>
        </member>
        <member name="T:Common.ServiceCommon.GenericCustomSearchController`3">
            <summary>
            自定义返回值，根据查询出的实体对返回值进行拼装
            </summary>
            <typeparam name="TRequest">请求实体参数，继承于ViewModelBase</typeparam>
            <typeparam name="TSearhEntity">查询实体参数，继承于ViewModelBase</typeparam>
            <typeparam name="TResponse">返回实体参数</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericSearchWithQueryController`2">
            <summary>
            该接口基类即将过时
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchWithQueryController`2.Get(Common.ServiceCommon.IPageQueryParameterService)">
            <summary>
            Get请求入口
            </summary>
            <param name="pageQueryParameterService"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchWithQueryController`2.PreperDatas(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            结果数据处理
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchWithQueryController`2.DoSearch(Common.Model.PageQuery{`0})">
            <summary>
            数据查询
            </summary>
            <param name="pageQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.GenericSearchWithQueryController`2.GetCount(Common.Model.PageQuery{`0})">
            <summary>
            获取数量
            </summary>
            <param name="pageQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ServiceCommon.BatchGenericSearchController`1">
            <summary>
            无查询条件的Get请求接口街垒
            </summary>
            <typeparam name="TResponse">返回实体参数</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericSearchController`4">
            <summary>
            两个实体聚合查询接口基类
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TTable"></typeparam>
            <typeparam name="TJoinTable"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericPostController`1">
            <summary>
            新增接口基类
            </summary>
            <typeparam name="TRequest">请求实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericPutController`1">
            <summary>
            修改接口基类
            </summary>
            <typeparam name="TRequest">请求实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.GenericDeleteController`1">
            <summary>
            删除接口基类
            </summary>
            <typeparam name="TRequest">请求实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericGetController`2">
            <summary>
            根据ID返回两个实体且实体继承于ViewModelBase接口基类
            </summary>
            <typeparam name="TResponse1">请求实体泛型，继承于ViewModelBase</typeparam>
            <typeparam name="TResponse2">请求实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericGetController`3">
            <summary>
            根据ID返回三个实体且实体继承于ViewModelBase接口基类
            </summary>
            <typeparam name="TResponse1">请求实体泛型，继承于ViewModelBase</typeparam>
            <typeparam name="TResponse2">请求实体泛型，继承于ViewModelBase</typeparam>
            <typeparam name="TResponse3">请求实体泛型，继承于ViewModelBase</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.IDynamicController">
            <summary>
            自定义Controller接口
            </summary>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPostController`1">
            <summary>
            一个参数的Post请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
        </member>
        <member name="M:Common.ServiceCommon.MultipleGenericPostController`1.GetReturnValue">
            <summary>
            设置接口返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPostController`2">
            <summary>
            两个参数的Post请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
            <typeparam name="TRequest2">请求实体泛型</typeparam>
        </member>
        <member name="M:Common.ServiceCommon.MultipleGenericPostController`2.GetReturnValue">
            <summary>
            设置接口返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPostController`3">
            <summary>
            三个参数的Post请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
            <typeparam name="TRequest2">请求实体泛型</typeparam>
            <typeparam name="TRequest3">请求实体泛型</typeparam>
        </member>
        <member name="M:Common.ServiceCommon.MultipleGenericPostController`3.GetReturnValue">
            <summary>
            设置接口返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPutController`1">
            <summary>
            一个参数的Put请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPutController`2">
            <summary>
            两个参数的Put请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
            <typeparam name="TRequest2">请求实体泛型</typeparam>
        </member>
        <member name="T:Common.ServiceCommon.MultipleGenericPutController`3">
            <summary>
            三个参数的Put请求接口基类
            </summary>
            <typeparam name="TRequest1">请求实体泛型</typeparam>
            <typeparam name="TRequest2">请求实体泛型</typeparam>
            <typeparam name="TRequest3">请求实体泛型</typeparam>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetDynamicDataTypeProperty(System.Type,System.Boolean,System.Boolean)">
            <summary>
            生成动态dto的属性
            </summary>
            <param name="dynamicControllerType"></param>
            <param name="isPost"></param>
            <param name="isPut"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetDynamicPrivateProperty(System.Type)">
            <summary>
            生成动态controller的私有属性
            </summary>
            <param name="dynamicControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetConstructorParameter(System.Type)">
            <summary>
            获取动态controller构造方法的参数
            </summary>
            <param name="dynamicControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetConstructorFunction(System.Type)">
            <summary>
            获取动态controller的构造函数的方法体
            </summary>
            <param name="dynamicControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetBasefunctionParametersString(System.Type,System.Boolean,System.Boolean)">
            <summary>
            获取接口对象方法调用参数
            </summary>
            <param name="dynamicControllerType"></param>
            <param name="isPost"></param>
            <param name="isPut"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetFullTypeNameByType(System.Type)">
            <summary>
            根据类型获取详细名称（命名空间+名称）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetParameterNameByType(System.Type)">
            <summary>
            根据类型属性的名称（泛型以_隔开）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ServiceCommon.DynamicControllerManager.GetNameByType(System.Type)">
            <summary>
            根据类型获取类型的名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Common.ServiceCommon.EnumTypeController.EnumValues.DisplayString">
            <summary>
            获取枚举显示的中文注释
            </summary>
        </member>
        <member name="P:Common.ServiceCommon.EnumTypeController.EnumValues.Value">
            <summary>
            获取枚举的值
            </summary>
        </member>
        <member name="P:Common.ServiceCommon.EnumTypeController.EnumValues.Key">
            <summary>
            获取枚举对应的代码
            </summary>
        </member>
        <member name="M:Common.ServiceCommon.EnumTypeController.GetEnumItemValuesByEnumType(System.Type)">
            <summary>  
             获取枚举值+描述  
            </summary>  
            <param name="enumType">Type,该参数的格式为typeof(需要读的枚举类型)</param>  
            <returns>键值对</returns>  
        </member>
        <member name="T:Common.ServiceCommon.HealthController">
            <summary>
            此方法为心跳监测接口类，用于服务发现
            </summary>
        </member>
        <member name="T:Common.ServiceCommon.SwaggerConfigure">
            <summary>
            Swagger配置类
            </summary>
        </member>
        <member name="M:Common.ServiceCommon.SwaggerConfigure.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            向服务集合中添加Swagger服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Common.ServiceCommon.SwaggerConfigure.UseSwaggerPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Swagger页面
            </summary>
            <param name="applicationBuilder"></param>
        </member>
    </members>
</doc>
