<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.AliYunFileHelper">
            <summary>
            阿里云文件服务器帮助实体
            </summary>
        </member>
        <member name="M:Common.AliYunFileHelper.UploadLocalFile(System.String,System.String,System.String)">
            <summary>
            上传本地文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="filePath">本地文件地址</param>
            <param name="currentFilePath">阿里云服务器文件夹</param>
            <returns></returns>
        </member>
        <member name="M:Common.AliYunFileHelper.UploadFile(System.Byte[],System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="binaryData">上传文件流</param>
            <param name="objectName">上传文件名</param>
            <param name="currentFilePath">阿里云服务器文件夹</param>
            <returns></returns>
        </member>
        <member name="M:Common.AliYunFileHelper.DownLoadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="objectName">文件名</param>
            <param name="currentFilePath">阿里云服务器文件夹</param>
            <returns></returns>
        </member>
        <member name="M:Common.AliYunFileHelper.FileExist(System.String,System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="objectName">文件名</param>
            <param name="currentFilePath">阿里云服务器文件夹</param>
            <returns></returns>
        </member>
        <member name="T:Common.ConfigManager">
            <summary>
            配置文件操作类
            </summary>
        </member>
        <member name="P:Common.ConfigManager.Configuration">
            <summary>
            配置文件操作对象
            </summary>
        </member>
        <member name="M:Common.ConfigManager.Init(System.String)">
            <summary>
            配置文件初始化
            </summary>
            <param name="enviroment"></param>
        </member>
        <member name="T:Common.ConvertExtend">
            <summary>
            转换扩展类
            </summary>
        </member>
        <member name="M:Common.ConvertExtend.ObjectToByteArray(System.Object)">
            <summary>
            object转换为字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Common.DealException">
            <summary>
            业务错误类
            </summary>
        </member>
        <member name="M:Common.DealException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Common.ExcelHelper">
            <summary>
            Excel帮助类
            </summary>
        </member>
        <member name="M:Common.ExcelHelper.GetExcel(System.IO.Stream)">
            <summary>
            根据数据流读物Excel表格数据
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ExcelHelper.ExportToDataTable(NPOI.SS.UserModel.ISheet)">
            <summary>
            把Sheet中的数据转换为DataTable
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ExcelHelper.DataTableToExcelByte(System.Data.DataTable,System.String)">
            <summary>
            将DataTable转换为excel2003格式。
            </summary>
            <param name="dt"></param>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="T:Common.HttpClientExtend">
             <summary>
            Httpclient的扩展类
             </summary>
        </member>
        <member name="M:Common.HttpClientExtend.AddAuthorizationHeader(System.Net.Http.HttpClient,System.String)">
            <summary>
            添加AuthorizationHeader
            </summary>
            <param name="httpClient"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="T:Common.HttpContentExtend">
            <summary>
            HttpContent扩展类
            </summary>
        </member>
        <member name="M:Common.HttpContentExtend.AddJsonContentType(System.Net.Http.HttpContent)">
            <summary>
            添加JsonContenttype的请求头
            </summary>
            <param name="httpContent"></param>
            <returns></returns>
        </member>
        <member name="T:Common.NetErrorTypeEnum">
            <summary>
            请求错误类型枚举
            </summary>
        </member>
        <member name="F:Common.NetErrorTypeEnum.DataError">
            <summary>
            获取数据失败
            </summary>
        </member>
        <member name="F:Common.NetErrorTypeEnum.NetworkError">
            <summary>
            请检查网络连接
            </summary>
        </member>
        <member name="F:Common.NetErrorTypeEnum.ErrorInterface">
            <summary>
            接口错误
            </summary>
        </member>
        <member name="F:Common.NetErrorTypeEnum.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="T:Common.HttpResult">
            <summary>
            HTTP请求结果
            </summary>
        </member>
        <member name="P:Common.HttpResult.Data">
            <summary>
            请求结果字符串
            </summary>
        </member>
        <member name="P:Common.HttpResult.Status">
            <summary>
            请求状态
            </summary>
        </member>
        <member name="P:Common.HttpResult.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:Common.HttpResult.#ctor(Common.NetErrorTypeEnum,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="status"></param>
            <param name="data"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Common.HttpFormPostHelper">
            <summary>
            表单请求帮助类
            </summary>
        </member>
        <member name="M:Common.HttpFormPostHelper.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.String,System.String)">
            <summary>
            form表单post请求
            </summary>
            <param name="url">请求url</param>
            <param name="keyValues">请求参数</param>
            <param name="timeOut">超时时间（单位秒）</param>
            <param name="tokenName">tokenName</param>
            <param name="tokenValue">token</param>
            <returns></returns>
        </member>
        <member name="T:Common.HttpJsonHelper">
            <summary>
            HTTPJsonHelper请求帮助类
            </summary>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpPostAsync(System.String,System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            post异步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="content"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpPost(System.String,System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            Post同步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="content"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpGetAsync(System.String,System.String,System.String)">
            <summary>
            get异步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpGet(System.String,System.String,System.String)">
            <summary>
            get同步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpPutAsync(System.String,System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            put异步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="content"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpPut(System.String,System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            put同步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="content"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpDeleteAsync(System.String,System.String,System.String)">
            <summary>
            delete异步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.HttpDelete(System.String,System.String,System.String)">
            <summary>
            delete同步请求
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.GetResponseAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            异步获取请求结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpJsonHelper.GetResponse``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            同步获取请求结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Common.HttpWebRequestExtend">
            <summary>
            httpwebrequest的扩展类
            </summary>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddJsonContentType(System.Net.HttpWebRequest)">
            <summary>
            添加JsonContenttype
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddFormContentType(System.Net.HttpWebRequest)">
            <summary>
            添加FormContenttype
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddPostMethod(System.Net.HttpWebRequest)">
            <summary>
            设置post的请求方法
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddGetMethod(System.Net.HttpWebRequest)">
            <summary>
            设置get的请求方法
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddDeleteMethod(System.Net.HttpWebRequest)">
            <summary>
            设置delete的请求方法
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddPutMethod(System.Net.HttpWebRequest)">
            <summary>
            设置put的请求方法
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddAuthorizationHeader(System.Net.HttpWebRequest,System.String)">
            <summary>
            添加Authorization的请求头
            </summary>
            <param name="httpWebRequest"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.AddContent(System.Net.HttpWebRequest,System.Byte[])">
            <summary>
            添加请求body
            </summary>
            <param name="httpWebRequest"></param>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestExtend.GetResponseData(System.Net.HttpWebRequest)">
            <summary>
            获取请求结果数据
            </summary>
            <param name="httpWebRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Common.HttpWebResponseResult">
            <summary>
            HttpWebResponse结果类
            </summary>
        </member>
        <member name="P:Common.HttpWebResponseResult.HttpStatus">
            <summary>
            请求状态码
            </summary>
        </member>
        <member name="P:Common.HttpWebResponseResult.DataString">
            <summary>
            请求结果数据字符串
            </summary>
        </member>
        <member name="M:Common.HttpWebResponseResult.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="httpStatus"></param>
            <param name="dataString"></param>
        </member>
        <member name="T:Common.HttpWebRequestHelper">
            <summary>
            HttpWebRequest请求帮助类
            </summary>
        </member>
        <member name="M:Common.HttpWebRequestHelper.JsonPost(System.String,System.Byte[],System.String)">
            <summary>
            Json的Post请求
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestHelper.JsonGet(System.String,System.String)">
            <summary>
            json的get请求
            </summary>
            <param name="url"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestHelper.JsonPut(System.String,System.Byte[],System.String)">
            <summary>
            json的put请求
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestHelper.JsonDelete(System.String,System.String)">
            <summary>
            json的delete请求
            </summary>
            <param name="url"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.HttpWebRequestHelper.FormPost(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            form表单的post请求
            </summary>
            <param name="url"></param>
            <param name="keyValues"></param>
            <param name="bearerToken"></param>
            <returns></returns>
        </member>
        <member name="T:Common.IDGenerator">
            <summary>
            id生成器类
            </summary>
        </member>
        <member name="F:Common.IDGenerator.m_nodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:Common.IDGenerator.m_node">
            <summary>
            节点编号
            </summary>
        </member>
        <member name="F:Common.IDGenerator.m_lockThis">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="F:Common.IDGenerator.MIN_DATE_TIME">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="F:Common.IDGenerator.TWEPOCH">
            <summary>
            开始时间截 (2018-01-01)
            </summary>
        </member>
        <member name="F:Common.IDGenerator.NODE_BITS">
            <summary>
            机器id所占的位数，节点ID范围在0-127
            </summary>
        </member>
        <member name="F:Common.IDGenerator.MIN_NODE">
            <summary>
            机器id最小值
            </summary>
        </member>
        <member name="F:Common.IDGenerator.MAX_NODE">
            <summary>
            机器id最大值
            </summary>
        </member>
        <member name="F:Common.IDGenerator.SEQUENCE_BITS">
            <summary>
            序列在id中占的位数
            </summary>
        </member>
        <member name="F:Common.IDGenerator.NODE_TYPE_BITS">
            <summary>
            节点类型所占位数，节点类型范围在0-63
            </summary>
        </member>
        <member name="F:Common.IDGenerator.MIN_NODE_TYPE">
            <summary>
            节点类型的最小值
            </summary>
        </member>
        <member name="F:Common.IDGenerator.MAX_NODE_TYPE">
            <summary>
            节点类型最大值
            </summary>
        </member>
        <member name="F:Common.IDGenerator.NODE_SHIFT">
            <summary>
            机器id向左移6位
            </summary>
        </member>
        <member name="F:Common.IDGenerator.SEQUENCE_SHIFT">
            <summary>
            生成序列向左移13位(7+6)
            </summary>
        </member>
        <member name="F:Common.IDGenerator.TIME_STAMP_SHIFT">
            <summary>
            时间截向左移22位(9+7+6)
            </summary>
        </member>
        <member name="F:Common.IDGenerator.SEQUENCE_MASK">
            <summary>
            生成序列的掩码，这里为512 (0b111111111=0x200=512)
            </summary>
        </member>
        <member name="F:Common.IDGenerator.m_lastTimestamp">
            <summary>
            上一次生成ID的总时间毫秒数
            </summary>
        </member>
        <member name="F:Common.IDGenerator.m_sequence">
            <summary>
            毫秒内序列
            </summary>
        </member>
        <member name="M:Common.IDGenerator.NextID">
            <summary>
            根据节点类型和节点编号生成新ID
            </summary>
            <returns>新生成的ID</returns>
        </member>
        <member name="M:Common.IDGenerator.GetTicks">
            <summary>
            获取从1970-01-01至今的毫秒数
            </summary>
        </member>
        <member name="M:Common.IDGenerator.BlockUntilNextMillis">
            <summary>
            阻塞线程直到下一毫秒
            </summary>
            <returns>阻塞之后的总时间毫秒数</returns>
        </member>
        <member name="M:Common.IDGenerator.GetTimeFromID(System.Int64)">
            <summary>
            从ID获取生成ID的时间
            </summary>
            <param name="id">ID</param>
            <returns>生成ID的时间</returns>
        </member>
        <member name="M:Common.IDGenerator.GetMachineNodeFromID(System.Int64)">
            <summary>
            从ID获取节点编号
            </summary>
            <param name="id">ID</param>
            <returns>节点编号</returns>
        </member>
        <member name="M:Common.IDGenerator.GetMethodFromID(System.Int64)">
            <summary>
            从ID获取节点类型
            </summary>
            <param name="id">ID</param>
            <returns>节点类型</returns>
        </member>
        <member name="T:Common.IEnumerableExtention">
            <summary>
            IEnumerable扩展类
            </summary>
        </member>
        <member name="M:Common.IEnumerableExtention.RemoveAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            移除所有元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="match"></param>
        </member>
        <member name="T:Common.IListExtention">
            <summary>
            IList扩展类
            </summary>
        </member>
        <member name="M:Common.IListExtention.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            移除集合中的所有元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="match"></param>
        </member>
        <member name="M:Common.IListExtention.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            向指定集合添加集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="other"></param>
        </member>
        <member name="M:Common.IListExtention.RemoveFrom``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            从指定起始位置移除剩余所有元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="startIndex"></param>
        </member>
        <member name="T:Common.JsonUtils">
            <summary>
            Json格式转换类
            </summary>
        </member>
        <member name="M:Common.JsonUtils.PropertyNameToJavaScriptStyle(System.String)">
            <summary>
            属性名转换为JavaScript风格
            </summary>
            <param name="propertyName"></param>
            <returns>属性名首字母小写</returns>
        </member>
        <member name="M:Common.JsonUtils.PropertyNameToCSharpStyle(System.String)">
            <summary>
            属性名转换为CSharp风格
            </summary>
            <param name="propertyName"></param>
            <returns>属性名大写</returns>
        </member>
        <member name="T:Common.JTokenHelper">
            <summary>
            JToken相关Helper类
            </summary>
        </member>
        <member name="M:Common.JTokenHelper.GetIntValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取整形数据
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetDateTimeValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取时间数据
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetNullAbleDateTimeValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取可为空的时间数据
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetDateTimeSpanValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取时间戳
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetStringValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取字符串
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetDecimalValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取decimal
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetDecimalNullabelValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取可为空的dececimal
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetBoolValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取bool
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetLongValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取长整形
            </summary>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="M:Common.JTokenHelper.GetEnumValue``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            获取枚举值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jToken"></param>
            <returns></returns>
        </member>
        <member name="T:Common.LambdaExtension">
            <summary>
            Lambda表达式相关扩展类
            </summary>
        </member>
        <member name="M:Common.LambdaExtension.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Lambda表达式拼接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LambdaExtension.And``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            And扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LambdaExtension.AndAlso``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            AndAlso扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LambdaExtension.Or``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            Or扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LambdaExtension.OrElse``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            OrElse扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LambdaExtension.ChangeParameter``3(System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            参数转换扩展
            </summary>
            <typeparam name="TOrignParameter">原参数类型</typeparam>
            <typeparam name="TChangeParameter">转换后的参数类型</typeparam>
            <typeparam name="TResult">表达式返回值类型</typeparam>
            <param name="expression">原表达式</param>
            <param name="changeParameterExpression">转换参数的表达式</param>
            <returns>转换参数后的表达式</returns>
        </member>
        <member name="M:Common.LambdaExtension.MultiChangeParameter``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``4}},System.Linq.Expressions.Expression{System.Func{``2,``0}},System.Linq.Expressions.Expression{System.Func{``3,``1}},System.String,System.String)">
            <summary>
            多参数转换扩展
            </summary>
            <typeparam name="TAOrignParameter">原参数类型A</typeparam>
            <typeparam name="TBOrignParameter">原参数类型B</typeparam>
            <typeparam name="TAChangeParameter">转换后的参数类型A</typeparam>
            <typeparam name="TBChangeParameter">转换后的参数类型B</typeparam>
            <typeparam name="TResult">表达式返回值类型</typeparam>
            <param name="expression">原表达式</param>
            <param name="aChangeParameterExpression">转换参数的表达式A</param>
            <param name="bChangeParameterExpression">转换参数的表达式B</param>
            <param name="aParameterName">参数A名称</param>
            <param name="bParameterName">参数B名称</param>
            <returns>转换参数后的表达式</returns>
        </member>
        <member name="M:Common.LambdaExtension.SingleChangeParameter``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Linq.Expressions.Expression{System.Func{``2,``0}},System.Linq.Expressions.Expression{System.Func{``2,``1}},System.String,System.String)">
            <summary>
            多参数转换扩展
            </summary>
            <typeparam name="TAOrignParameter">原参数类型A</typeparam>
            <typeparam name="TBOrignParameter">原参数类型B</typeparam>
            <typeparam name="TChangeParameter">转换后的参数类型</typeparam>
            <typeparam name="TResult">表达式返回值类型</typeparam>
            <param name="expression">原表达式</param>
            <param name="aChangeParameterExpression">转换参数A的表达式</param>
            <param name="bChangeParameterExpression">转换参数B的表达式</param>
            <param name="aParameterName">参数A名称</param>
            <param name="bParameterName">参数B名称</param>
            <returns>转换参数后的表达式</returns>
        </member>
        <member name="M:Common.LambdaExtension.RenameParameter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            参数重命名扩展
            </summary>
            <typeparam name="TParameter">参数类型</typeparam>
            <typeparam name="TResult">表达式返回值类型</typeparam>
            <param name="expression">原表达式</param>
            <param name="parameterName">参数名称</param>
            <returns>重命名后的表达式</returns>
        </member>
        <member name="M:Common.LambdaExtension.RenameParameter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.String,System.String)">
            <summary>
            多参数重命名扩展
            </summary>
            <typeparam name="TAParameter">参数A类型</typeparam>
            <typeparam name="TBParameter">参数B类型</typeparam>
            <typeparam name="TResult">表达式返回值类型</typeparam>
            <param name="expression">原表达式</param>
            <param name="aParameterName">参数A名称</param>
            <param name="bParameterName">参数B名称</param>
            <returns>重命名后的表达式</returns>
        </member>
        <member name="M:Common.LambdaExtension.ReplaceAssign``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            赋值转换扩展
            </summary>
            <typeparam name="T">需要转换的表达式参数类型</typeparam>
            <param name="expression">需要转换的表达式</param>
            <returns>转换后的表达式</returns>
        </member>
        <member name="T:Common.EquelToAssignVisitor">
            <summary>
            赋值转换器
            </summary>
        </member>
        <member name="M:Common.EquelToAssignVisitor.ReplaceBinary``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            替换表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.EquelToAssignVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            访问表达式树
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterRebinder">
            <summary>
            重新绑定参数访问器
            </summary>
        </member>
        <member name="M:Common.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            重新绑定参数
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Common.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterChanger`3">
            <summary>
            参数转换访问器
            </summary>
        </member>
        <member name="M:Common.ParameterChanger`3.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`3.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            访问表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`3.ChangeParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            变换参数
            </summary>
            <param name="body"></param>
            <param name="changeParameter"></param>
            <param name="changeParameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterChanger`5">
            <summary>
            参数转换访问器
            </summary>
        </member>
        <member name="M:Common.ParameterChanger`5.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Common.ParameterChanger`5.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`5.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            访问表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`5.ChangeParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression{System.Func{`2,`0}},System.Linq.Expressions.Expression{System.Func{`3,`1}})">
            <summary>
            变换参数
            </summary>
            <param name="body"></param>
            <param name="aChangeParameter"></param>
            <param name="bChangeParameter"></param>
            <param name="aChangeParameterExpression"></param>
            <param name="bChangeParameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterChanger`4">
            <summary>
            参数转换访问器
            </summary>
        </member>
        <member name="M:Common.ParameterChanger`4.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Common.ParameterChanger`4.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`4.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            访问表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterChanger`4.ChangeParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression{System.Func{`2,`0}},System.Linq.Expressions.Expression{System.Func{`2,`1}},System.String,System.String)">
            <summary>
            变换参数
            </summary>
            <param name="body"></param>
            <param name="changeParameter"></param>
            <param name="aChangeParameterExpression"></param>
            <param name="bChangeParameterExpression"></param>
            <param name="aParameterName"></param>
            <param name="bParameterName"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterRenamer`2">
            <summary>
            参数重命名访问器
            </summary>
        </member>
        <member name="M:Common.ParameterRenamer`2.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterRenamer`2.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            访问表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterRenamer`2.RenameParameter(System.Linq.Expressions.Expression,System.String)">
            <summary>
            重命名参数
            </summary>
            <param name="body"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ParameterRenamer`3">
            <summary>
            参数重命名访问器
            </summary>
        </member>
        <member name="M:Common.ParameterRenamer`3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Common.ParameterRenamer`3.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterRenamer`3.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            访问表达式树
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ParameterRenamer`3.RenameParameter(System.Linq.Expressions.Expression,System.String,System.String,System.String,System.String)">
            <summary>
            重命名参数
            </summary>
            <param name="body"></param>
            <param name="aOrignParameterName"></param>
            <param name="bOrignParameterName"></param>
            <param name="aParameterName"></param>
            <param name="bParameterName"></param>
            <returns></returns>
        </member>
        <member name="T:Common.LogHelper">
            <summary>
            日志帮助类
            </summary>
        </member>
        <member name="M:Common.LogHelper.CreateLog(System.String,System.String[])">
            <summary>
            创建日志
            </summary>
            <param name="repositoryName"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:Common.MapperModelHelper`1">
            <summary>
            实体映射帮组类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Common.MapperModelHelper`1.ReadModel(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            根据字典获取实体列表
            </summary>
            <param name="dataDictionary"></param>
            <returns></returns>
        </member>
        <member name="T:Common.MD5Encryption">
            <summary>
            MD5编码扩展类
            </summary>
        </member>
        <member name="M:Common.MD5Encryption.GetMd5Password(System.String,System.String)">
            <summary>
            获取MD5加密字符串
            </summary>
            <param name="password"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="T:Common.SteamHelper">
            <summary>
            流数据处理帮助类
            </summary>
        </member>
        <member name="M:Common.SteamHelper.ReadSteamToBufferAsync(System.IO.Stream,System.Int64)">
            <summary>
            异步读取流数据
            </summary>
            <param name="stream"></param>
            <param name="contentLength">数据流长度</param>
            <returns></returns>
        </member>
        <member name="M:Common.SteamHelper.ReadSteamToBuffer(System.IO.Stream,System.Int64)">
            <summary>
            同步读取流数据
            </summary>
            <param name="stream"></param>
            <param name="contentLength">数据流长度</param>
            <returns></returns>
        </member>
        <member name="T:Common.TypeReflector">
            <summary>
            类型反射器
            </summary>
        </member>
        <member name="M:Common.TypeReflector.ReflectType(System.Func{System.Type,System.Boolean})">
            <summary>
            获取当前程序集中所有满足筛选条件的Type
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="T:Common.TypeUtils">
            <summary>
            Type类型扩展类
            </summary>
        </member>
        <member name="M:Common.TypeUtils.GetBaseTypes(System.Type)">
            <summary>
            获取该类型的基类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>