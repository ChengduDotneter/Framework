<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.RPC</name>
    </assembly>
    <members>
        <member name="T:Common.RPC.BufferSerializer.BufferSerialzerFactory">
            <summary>
            缓冲区序列化工厂
            </summary>
        </member>
        <member name="M:Common.RPC.BufferSerializer.BufferSerialzerFactory.CreateBinaryBufferSerializer(System.Text.Encoding)">
            <summary>
            创建二进制序列化器
            </summary>
            <param name="encoding">序列化编码规则</param>
            <returns></returns>
        </member>
        <member name="T:Common.RPC.BufferSerializer.IBufferSerializer">
            <summary>
            字节序列化缓冲器接口
            </summary>
        </member>
        <member name="M:Common.RPC.BufferSerializer.IBufferSerializer.Serialize(Common.RPC.IRPCData,System.Byte[])">
            <summary>
            序列化
            </summary>
            <param name="data">数据</param>
            <param name="buffer">字节流缓冲区</param>
            <returns>返回序列化的长度</returns>
        </member>
        <member name="M:Common.RPC.BufferSerializer.IBufferSerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="buffer">字节流缓冲区</param>
            <returns></returns>
        </member>
        <member name="T:Common.RPC.IRPCData">
            <summary>
            RPC数据结构体接口，由于类存在浅拷贝问题，则继承该接口的数据类型强制定义为结构体
            </summary>
        </member>
        <member name="P:Common.RPC.IRPCData.MessageID">
            <summary>
            全局唯一RPCID
            </summary>
        </member>
        <member name="T:Common.RPC.ProcessorBase">
            <summary>
            RPC处理器基类
            </summary>
        </member>
        <member name="M:Common.RPC.ProcessorBase.SendData(Common.RPC.ServiceClient,Common.RPC.IRPCData)">
            <summary>
            发送数据
            </summary>
            <param name="serviceClient">RPC服务端</param>
            <param name="data">所需发送的数据结构体</param>
        </member>
        <member name="M:Common.RPC.ProcessorBase.SendSessionData(Common.RPC.ServiceClient,Common.RPC.TransferAdapter.SessionContext,Common.RPC.IRPCData)">
            <summary>
            发送数据
            </summary>
            <param name="serviceClient">RPC服务端</param>
            <param name="sessionContext"></param>
            <param name="data">所需发送的数据结构体</param>
        </member>
        <member name="T:Common.RPC.ResponseProcessorBase`1">
            <summary>
            RPC接收端处理器基类
            </summary>
            <typeparam name="TRecieveData">接收的数据结构体泛型</typeparam>
        </member>
        <member name="M:Common.RPC.ResponseProcessorBase`1.#ctor(Common.RPC.ServiceClient)">
            <summary>
            构造函数
            </summary>
            <param name="serviceClient"></param>
        </member>
        <member name="M:Common.RPC.ResponseProcessorBase`1.#ctor(Common.RPC.ServiceClient[])">
            <summary>
            构造函数
            </summary>
            <param name="serviceClients"></param>
        </member>
        <member name="M:Common.RPC.ResponseProcessorBase`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Common.RPC.ResponseProcessorBase`1.ProcessData(Common.RPC.TransferAdapter.SessionContext,`0)">
            <summary>
            数据处理方法
            </summary>
            <param name="sessionContext">RPC请求上下文</param>
            <param name="data">接收的数据</param>
        </member>
        <member name="T:Common.RPC.RequestProcessorBase`2">
            <summary>
            RPC请求处理器基类
            </summary>
            <typeparam name="TSendData">发送的数据结构体泛型</typeparam>
            <typeparam name="TRecieveData">接收的数据结构体泛型</typeparam>
        </member>
        <member name="T:Common.RPC.RequestProcessorBase`2.TaskBody">
            <summary>
            任务体
            </summary>
        </member>
        <member name="P:Common.RPC.RequestProcessorBase`2.TaskBody.SessionID">
            <summary>
            连接ID
            </summary>
        </member>
        <member name="P:Common.RPC.RequestProcessorBase`2.TaskBody.CallBack">
            <summary>
            回调
            </summary>
        </member>
        <member name="P:Common.RPC.RequestProcessorBase`2.TaskBody.IsResponses">
            <summary>
            是否有返回的结果
            </summary>
        </member>
        <member name="P:Common.RPC.RequestProcessorBase`2.TaskBody.ResponseObject">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:Common.RPC.RequestProcessorBase`2.SendRequestProcessor">
            <summary>
            RPC发送请求处理器基类
            </summary>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.SendRequestProcessor.ProcessData(Common.RPC.TransferAdapter.SessionContext,`1)">
            <summary>
            数据处理方法
            </summary>
            <param name="sessionContext">链接上下文</param>
            <param name="data">接收的数据</param>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.SendRequestProcessor.SendSessionData(System.Int64,`0)">
            <summary>
            发送数据
            </summary>
            <param name="sessionID">链接上下文</param>
            <param name="data">接收的数据</param>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="requestTimeout"></param>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.ProcessData(Common.RPC.TransferAdapter.SessionContext,`1)">
            <summary>
            数据处理
            </summary>
            <param name="sessionContext">链接上下文</param>
            <param name="data">接收的数据</param>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.Wait(System.Object)">
            <summary>
            等待
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.Callback(System.Threading.Tasks.Task)">
            <summary>
            回调
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.Request(Common.RPC.ServiceClient,`0,System.Func{`1,System.Boolean})">
            <summary>
            请求
            </summary>
            <param name="serviceClient">RPC服务客户端</param>
            <param name="sendData">发送的数据结构体</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.RequestProcessorBase`2.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Common.RPC.MultipleRequestProcessorBase`2">
            <summary>
            RPC一推多请求处理器基类
            </summary>
            <typeparam name="TSendData">发送的数据结构体泛型</typeparam>
            <typeparam name="TRecieveData">接收的数据结构体泛型</typeparam>
        </member>
        <member name="M:Common.RPC.MultipleRequestProcessorBase`2.#ctor(Common.RPC.ServiceClient[],System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="serviceClients"></param>
            <param name="requestTimeout"></param>
        </member>
        <member name="M:Common.RPC.MultipleRequestProcessorBase`2.Request(`0,System.Func{`1,System.Boolean})">
            <summary>
            请求
            </summary>
            <param name="sendData">发送的数据</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="T:Common.RPC.PartitionRequestProcessorBase`2">
            <summary>
            RPC分区请求处理器基类
            </summary>
            <typeparam name="TSendData"></typeparam>
            <typeparam name="TRecieveData"></typeparam>
        </member>
        <member name="M:Common.RPC.PartitionRequestProcessorBase`2.#ctor(Common.RPC.ServiceClient[],System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="serviceClients"></param>
            <param name="requestTimeout"></param>
        </member>
        <member name="M:Common.RPC.PartitionRequestProcessorBase`2.Request(`0,System.Func{`1,System.Boolean},Common.RPC.ServiceClient@)">
            <summary>
            请求
            </summary>
            <param name="sendData">发送的数据结构体</param>
            <param name="callback">回调</param>
            <param name="serviceClient">RPC服务客户端</param>
            <returns></returns>
        </member>
        <member name="T:Common.RPC.ServiceClient">
            <summary>
            RPC服务核心模块
            </summary>
        </member>
        <member name="T:Common.RPC.ServiceClient.RecieveData">
            <summary>
            接收的数据实体
            </summary>
        </member>
        <member name="P:Common.RPC.ServiceClient.RecieveData.SessionContext">
            <summary>
            通讯上下文
            </summary>
        </member>
        <member name="P:Common.RPC.ServiceClient.RecieveData.Buffer">
            <summary>
            字节流缓冲区
            </summary>
        </member>
        <member name="M:Common.RPC.ServiceClient.RecieveData.#ctor(Common.RPC.TransferAdapter.SessionContext,System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="sessionContext">通讯上下文</param>
            <param name="buffer">字节缓冲区</param>
        </member>
        <member name="T:Common.RPC.ServiceClient.SendingData">
            <summary>
            发送的数据实体
            </summary>
        </member>
        <member name="P:Common.RPC.ServiceClient.SendingData.SessionContext">
            <summary>
            通讯上下文
            </summary>
        </member>
        <member name="P:Common.RPC.ServiceClient.SendingData.Data">
            <summary>
            RPC结构体数据
            </summary>
        </member>
        <member name="M:Common.RPC.ServiceClient.SendingData.#ctor(Common.RPC.TransferAdapter.SessionContext,Common.RPC.IRPCData)">
            <summary>
            构造函数
            </summary>
            <param name="sessionContext">上下文</param>
            <param name="data">所需发送的数据</param>
        </member>
        <member name="M:Common.RPC.ServiceClient.#ctor(Common.RPC.TransferAdapter.ITransferAdapter,Common.RPC.BufferSerializer.IBufferSerializer)">
            <summary>
            构造函数
            </summary>
            <param name="transferAdapter"></param>
            <param name="bufferSerializer"></param>
        </member>
        <member name="M:Common.RPC.ServiceClient.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:Common.RPC.ServiceClient.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Common.RPC.ServiceClient.SendData(System.Int64,Common.RPC.IRPCData)">
            <summary>
            发送数据
            </summary>
            <param name="sessionID">通讯ID</param>
            <param name="data">所需发送的数据</param>
        </member>
        <member name="M:Common.RPC.ServiceClient.SendSessionData(Common.RPC.TransferAdapter.SessionContext,Common.RPC.IRPCData)">
            <summary>
            发送数据
            </summary>
            <param name="sessionContext">通讯上下文</param>
            <param name="data">所需发送的数据</param>
        </member>
        <member name="M:Common.RPC.ServiceClient.RegisterProcessor(Common.RPC.ProcessorBase)">
            <summary>
            注册通讯端处理器
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Common.RPC.ServiceClient.UnRegisterProcessor(System.Object)">
            <summary>
            解除注册通讯端处理器
            </summary>
            <param name="processor"></param>
        </member>
        <member name="T:Common.RPC.TransferAdapter.OnBufferRecievedHandler">
            <summary>
            字节流数据处理委托
            </summary>
            <param name="sessionContext">通讯上下文</param>
            <param name="buffer">字节流缓冲区</param>
        </member>
        <member name="T:Common.RPC.TransferAdapter.ITransferAdapter">
            <summary>
            通讯数据转换器适配器接口
            </summary>
        </member>
        <member name="E:Common.RPC.TransferAdapter.ITransferAdapter.OnBufferRecieved">
            <summary>
            数据转换事件
            </summary>
        </member>
        <member name="M:Common.RPC.TransferAdapter.ITransferAdapter.Strat">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:Common.RPC.TransferAdapter.ITransferAdapter.SendBuffer(Common.RPC.TransferAdapter.SessionContext,System.Byte[],System.Int32)">
            <summary>
            发送字节流缓冲区中的数据
            </summary>
            <param name="sessionContext">通讯上下文</param>
            <param name="buffer">字节流缓冲区</param>
            <param name="length">数据总长度</param>
        </member>
        <member name="T:Common.RPC.TransferAdapter.SessionContext">
            <summary>
            通讯端上下文实体
            </summary>
        </member>
        <member name="P:Common.RPC.TransferAdapter.SessionContext.SessionID">
            <summary>
            通讯ID
            </summary>
        </member>
        <member name="P:Common.RPC.TransferAdapter.SessionContext.Context">
            <summary>
            通讯内容
            </summary>
        </member>
        <member name="M:Common.RPC.TransferAdapter.SessionContext.IsDefaultContext(Common.RPC.TransferAdapter.SessionContext)">
            <summary>
            是否默认通讯上下文
            </summary>
            <param name="sessionContext">通讯上下文</param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.TransferAdapter.SessionContext.#ctor(System.Int64,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="sessionID">通讯ID</param>
            <param name="context">通讯内容</param>
        </member>
        <member name="M:Common.RPC.TransferAdapter.SessionContext.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="sessionID">通讯ID</param>
        </member>
        <member name="T:Common.RPC.TransferAdapter.TransferAdapterFactory">
            <summary>
            RPC数据处理器适配工厂
            </summary>
        </member>
        <member name="M:Common.RPC.TransferAdapter.TransferAdapterFactory.CreateZeroMQTransferAdapter(System.Net.IPEndPoint,Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum,System.String)">
            <summary>
            创建ZeroMQ数据处理器
            </summary>
            <param name="endPoint">终结点端口</param>
            <param name="zeroMQSocketType">ZeroMQ连接类型</param>
            <param name="identity">RPC通讯端标识</param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.TransferAdapter.TransferAdapterFactory.CreatePackageSpliterZeroMQTransferAdapter(System.Net.IPEndPoint,Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum,System.String)">
            <summary>
            创建ZeroMQ拆包数据处理器
            </summary>
            <param name="endPoint">终结点端口</param>
            <param name="zeroMQSocketType">ZeroMQ连接类型</param>
            <param name="identity">RPC通讯端标识</param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.TransferAdapter.TransferAdapterFactory.CreateUDPCRCTransferAdapter(System.Net.IPEndPoint,Common.RPC.TransferAdapter.UDPCRCSocketTypeEnum)">
            <summary>
            创建UDP数据处理器
            </summary>
            <param name="endPoint">终结点端口</param>
            <param name="udpCRCSocketType">UDP连接类型</param>
            <returns></returns>
        </member>
        <member name="M:Common.RPC.TransferAdapter.TransferAdapterFactory.CreatePackageSpliterUDPCRCTransferAdapter(System.Net.IPEndPoint,Common.RPC.TransferAdapter.UDPCRCSocketTypeEnum)">
            <summary>
            创建UDP拆包数据处理器
            </summary>
            <param name="endPoint">终结点端口</param>
            <param name="udpCRCSocketType">UDP连接类型</param>
            <returns></returns>
        </member>
        <member name="T:Common.RPC.TransferAdapter.UDPCRCSocketTypeEnum">
            <summary>
            UDP连接类型枚举
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.UDPCRCSocketTypeEnum.Server">
            <summary>
            服务端
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.UDPCRCSocketTypeEnum.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="T:Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum">
            <summary>
            ZeroMQ连接类型枚举
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum.Publisher">
            <summary>
            发布端
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum.Subscriber">
            <summary>
            接收端
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:Common.RPC.TransferAdapter.ZeroMQSocketTypeEnum.Server">
            <summary>
            服务端
            </summary>
        </member>
    </members>
</doc>
